//RUN: onnx-mlir --EmitONNXIR --run-torch-pass %s -o=%t >/dev/null && cat %t.onnx.mlir | FileCheck -v %s

module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"}  {
  func @main_graph(%arg0: tensor<1x1x28x28xf32>) -> tensor<1x26x13x13xf32> attributes {input_names = ["input"], output_names = ["5"]} {
    %0 = "onnx.Constant"() {value = dense<"0xtensor<26x1x5x5xf32>} : () -> tensor<26x1x5x5xf32>
    %1 = "onnx.Constant"() {value = dense<[-0.0684868842, -0.0577786453, 0.141013891, -0.0920972153, 0.128918633, 0.0273608696, 0.00894258078, -0.085247375, -0.0821276679, -0.0425586216, -0.0547861569, 0.10515549, 0.186646134, 0.0672790557, -0.143839031, 0.158396319, -0.030371381, -0.00787265319, 0.0451157354, 0.0328948274, 0.108056761, 0.0260973703, -0.101072788, -0.0465707555, -0.196033075, -0.105192877]> : tensor<26xf32>} : () -> tensor<26xf32>
//CHECK: [[STRIDE:%.]] = torch.prim.ListConstruct %int1{{_*[0-9]*}}, %int1{{_*[0-9]*}} :
    //CHECK: [[DILATION:%.]] = torch.prim.ListConstruct %int1{{_*[0-9]*}}, %int1{{_*[0-9]*}} :
    //CHECK: [[PAD:%.]] = torch.prim.ListConstruct %int1, %int1{{_*[0-9]*}} :
    %2 = "onnx.Conv"(%arg0, %0, %1) {dilations = [1, 1], group = 1 : si64, kernel_shape = [5, 5], onnx_node_name = "Conv_0", pads = [1, 1, 1, 1], strides = [1, 1]} : (tensor<1x1x28x28xf32>, tensor<26x1x5x5xf32>, tensor<26xf32>) -> tensor<1x26x26x26xf32>
//CHECK: torch.aten.conv2d %arg0, %{{[0-9]}}, %{{[0-9]}}, [[STRIDE]], [[PAD]], [[DILATION]], %int1{{_*[0-9]*}} : !torch.vtensor<[1,1,28,28],f32>, !torch.vtensor<[26,1,5,5],f32>, !torch.vtensor<[26],f32>, !torch.list<int>, !torch.list<int>, !torch.list<int>, !torch.int -> !torch.vtensor<[1,26,26,26],f32>
    %3 = "onnx.MaxPoolSingleOut"(%2) {kernel_shape = [2, 2], onnx_node_name = "MaxPool_1", pads = [0, 0, 0, 0], strides = [2, 2]} : (tensor<1x26x26x26xf32>) -> tensor<1x26x13x13xf32>
    %4 = "onnx.LeakyRelu"(%3) {alpha = 0.00999999977 : f32, onnx_node_name = "LeakyRelu_2"} : (tensor<1x26x13x13xf32>) -> tensor<1x26x13x13xf32>
    return %4 : tensor<1x26x13x13xf32>
  }
  "onnx.EntryPoint"() {func = @main_graph, numInputs = 1 : i32, numOutputs = 1 : i32, signature = "[    { \22type\22 : \22f32\22 , \22dims\22 : [1 , 1 , 28 , 28] , \22name\22 : \22input\22 }\0A\0A]\00@[   { \22type\22 : \22f32\22 , \22dims\22 : [1 , 26 , 13 , 13] , \22name\22 : \225\22 }\0A\0A]\00"} : () -> ()
}
